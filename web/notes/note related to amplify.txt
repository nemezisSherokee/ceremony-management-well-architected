create our amplify backend:

1 - init amplify
amplify init

2- Adding a backend api (appsync for graphQL)
amplify add api
"amplify push" will build all your local backend resources and provision it in the cloud
"amplify publish" will build all your local backend and frontend resources (if you have hosting category added) and provision it in the cloud

3- Mocking locally to test if everything works
amplify mock api


mocking amplify locally:

 - First start the mocking process with the following command : amplify mock api
	
   this will start a graphiQl server at http://192.168.8.1:20002 and a local dynamodb 
 - to view the tables of the local dynamodb instance, follow the steps:

	run the following command with gitbatch to open the dynamodb-admin locally on url : http://localhost:8001/
	AWS_SECRET_ACCESS_KEY=fake AWS_ACCESS_KEY_ID=fake AWS_REGION=us-fake-1 DYNAMO_ENDPOINT=http://localhost:62224 dynamodb-admin

	NOTE: of course you first need to install dynamodb-admin with : npm install -g dynamodb-admin


	https://github.com/aaronshaf/dynamodb-admin/issues/52
	https://github.com/aaronshaf/dynamodb-admin
	https://www.gravitywell.co.uk/insights/how-to-use-your-mocked-dynamodb-with-appsync-and-lambda/

----------------
Adding function to Amplify Project

every resolver need a datasource to communicate with. Adding function to Project is as followed:

1 - create the function or its get is ARN in the form  "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:echofunction-${env}" OR "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:echofunction-${env}"
2 - create a DataSource Resource in Cloudformation template  in amplify\backend\api\cmwaapi\stacks\CustomResources.json
3 - Create a Resolver Resource in the Cloudformation in amplify\backend\api\cmwaapi\stacks\CustomResources.json
4 - Create Request and Response Resolver in Path :  amplify\backend\api\cmwaapi\resolvers\Query.echo.req.vtl and Query.echo.res.vtl 
5 - Create a Role Resource giving Appsync the right to access and call the referenced Lambda function in 1. amplify\backend\api\cmwaapi\stacks\CustomResources.json

Important links to this topic:
https://medium.com/@joshua.a.kahn/building-aws-appsync-pipeline-resolvers-with-aws-cloudformation-d57d648ecd34
https://amplify-sns.workshop.aws/en/80_e2e_test/00_-cypress.html
https://docs.amplify.aws/cli/graphql-transformer/resolvers/#add-a-custom-resolver-that-targets-a-dynamodb-table-from-model

our Amplify project curently has 3 function: NodeJs function and java function

create a new env to test the function remote

- git checkout -b test_function_remote
- amplify add env test_function_remote
- amplify push 

